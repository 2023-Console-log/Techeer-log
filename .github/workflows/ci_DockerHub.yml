## This workflow uses actions that are not certified by GitHub.
## They are provided by a third-party and are governed by
## separate terms of service, privacy policy, and support
## documentation.
## This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
## For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
#
#name: Console-log CI/CD by Docker Hub
#
#on:
#  push:
#    branches: [ "main" ]
##    branches: [ "main", "develop" ]
#
##  pull_request:
##    branches: [ "main", "develop" ]
#
#env:
#  PROJECT_NAME: console-log
#  BUCKET_NAME: console-log-codedeploy
#  CODE_DEPLOY_APP_NAME: Console-log-CodeDeploy
#  DEPLOYMENT_GROUP_NAME: Console-log-Deployment-Group
#
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v3
#
#    # 도커 허브 사용을 위해 도커에 로그인
#    - name: Login to DockerHub
#      uses: docker/login-action@v3
#      with:
#        username: ${{ secrets.DOCKERHUB_USERNAME }}
#        password: ${{ secrets.DOCKERHUB_TOKEN }} # 도커 홈페이지에서 발급받은 토큰 사용
#
#    - name: Build and Push to DockerHub
#      run: |
#        docker compose -f docker-compose.deploy.yml build
#        docker compose -f docker-compose.deploy.yml push
#
#    - name: Copy Docker Compose to EC2
#      uses: appleboy/scp-action@master
#      with:
#        host: ${{secrets.AWS_HOST}}
#        username: ${{secrets.AWS_USERNAME}}
#        key: ${{ secrets.AWS_KEY_PEM }}
#        port: ${{ secrets.AWS_PORT }}
#        source: "nginx/nginx-ec2-1.conf, nginx/nginx-ec2-2.conf, docker-compose.ec2.yml, deploy_to_ec2.sh"
#        target: ${{ secrets.TARGET_DIRECTORY }}
#        overwrite: true
#
#    - name: Connect to EC2 using SSH
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{secrets.AWS_HOST}}
#        username: ${{secrets.AWS_USERNAME}}
#        key: ${{ secrets.AWS_KEY_PEM }}
#        envs: GITHUB_SHA
#        script: |
#          cd ${{ secrets.TARGET_DIRECTORY }}
#          sudo echo "${{ secrets.DB_ENV }}" > db.env
#          sudo echo "${{ secrets.BACKEND_SECRET_ENV }}" > backend-secret.env
#          sudo echo "${{ secrets.SPRING_SOURCE }}" > spring-source.env
#          sudo chmod +x ./deploy_to_ec2.sh
#          sudo ./deploy_to_ec2.sh
#
