version: "3.8"

volumes:
  build_folder: null
  log_folder:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./backend/logs/backend

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile-deploy
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      #docker-compose.yml과 같은 레벨에 둔 nginx.conf를 mount.
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
      - ./nginx/nginx-ec2.conf:/etc/nginx/nginx.conf
      - build_folder:/var/www/frontend:ro
    tty: true
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  backend1:
    build:
      context: ./backend
      dockerfile: Dockerfile-deploy
    container_name: backend1
    restart: always
    #    networks:
    #      - pinpoint_pinpoint
    #      - default
    env_file:
      - "./backend/backend-secret-deploy.env"
      - "./backend/spring-source-deploy.env"
    volumes:
      - log_folder:/logs/backend
    environment:
      - SERVER_PORT=8080
    ports:
      - "8080:8080"
    #    command: [ "java", "-jar", "-javaagent:/usr/local/pinpoint-agent-2.5.3/pinpoint-bootstrap-2.5.3.jar", "-Dpinpoint.agentId=test", "-Dpinpoint.applicationName=consolelog","-Dpinpoint.config=/usr/local/pinpoint-agent-2.5.3/pinpoint-root.config", "/app.jar" ]
    command: [ "java", "-jar", "/app.jar" ]

  backend2:
    build:
      context: ./backend
      dockerfile: Dockerfile-deploy
    container_name: backend2
    restart: always
    env_file:
      - "./backend/backend-secret-deploy.env"
      - "./backend/spring-source-deploy.env"
    volumes:
      - log_folder:/logs/backend
    environment:
      - SERVER_PORT=8081
    ports:
      - "8081:8081"
    command: [ "java", "-jar", "/app.jar" ]

  frontend:
    build: ./frontend
    restart: always
    container_name: frontend
    volumes:
      - build_folder:/frontend/volume:rw
    tty: true


  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

#networks:
#  pinpoint_pinpoint:
#    external: true
#  Entrypoint 로 명령어가 동작하지 않음. 직접 접속하여 명령을 수행하는 것은 가능
#  docker exec -it frontend sh
#  cp -rf /frontend/dist/* /frontend/volume/
#  exit